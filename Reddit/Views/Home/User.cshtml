@inject UserManager<ApplicationUser> userManager
@model ApplicationUser

<div>
<h3>@Model.UserName</h3>
@Model.CreatedPosts.Sum(p => p.Score) Link Karma - @Model.CreatedComments.Sum(c => c.Score) Comment Karma


<ul style="margin-left:10px;">
    @{var posts = @Model.CreatedPosts.OrderByDescending(p => p.Created).ToList();}
    @foreach (var item in Model.CreatedComments.OrderByDescending(c => c.Created)) {
        @while (posts.Count > 0 && posts[0].Created > item.Created)
        {
            <li style="display: block">
                <div class="post">
                    <div class="upvote-btn">
                        @{
                            if (posts[0].UpvotedBy.FirstOrDefault(x => x.UserId == userManager.GetUserId(User)) != null && posts[0].UpvotedBy.FirstOrDefault(x => x.UserId == userManager.GetUserId(User)).Upvoted)
                            {
                                <span id="@posts[0].PostId-upbtn" onclick="un_upvote_post(@posts[0].PostId, @posts[0].Score - 1)" class="upvote">
                                    <div id="@posts[0].PostId-uplayer"
                                        style="background-color: rgba(255, 165, 0, 0.7);width:85%;height:10px;margin-top:5px"></div>
                                </span>
                                <div id="@posts[0].PostId-score" style="color:orange">@posts[0].Score</div>
                        
                                <span id="@posts[0].PostId-downbtn" onclick="downvote_post(@posts[0].PostId, @posts[0].Score - 1)" class="downvote">
                                    <div id="@posts[0].PostId-downlayer"></div>
                                </span>
                            }
                            else if (posts[0].DownvotedBy.FirstOrDefault(x => x.UserId == userManager.GetUserId(User)) != null && posts[0].DownvotedBy.FirstOrDefault(x => x.UserId == userManager.GetUserId(User)).Downvoted)
                            {
                                <span id="@posts[0].PostId-upbtn" onclick="upvote_post(@posts[0].PostId, @posts[0].Score + 1)" class="upvote">
                                    <div id="@posts[0].PostId-uplayer"></div>
                                </span>
                                <div id="@posts[0].PostId-score" style="color:blue">@posts[0].Score</div>
                        
                                <span id="@posts[0].PostId-downbtn" onclick="un_downvote_post(@posts[0].PostId, @posts[0].Score + 1)" class="downvote">
                                    <div id="@posts[0].PostId-downlayer"
                                    style="background-color: rgba(0, 0, 255, 0.7);width:85%;height:10px;margin-top:5px"></div>
                                </span>
                            }
                            else
                            {
                                <span id="@posts[0].PostId-upbtn" onclick="upvote_post(@posts[0].PostId, @posts[0].Score)" class="upvote">
                                    <div id="@posts[0].PostId-uplayer"></div>
                                </span>
                                <div id="@posts[0].PostId-score">@posts[0].Score</div>
                        
                                <span id="@posts[0].PostId-downbtn" onclick="downvote_post(@posts[0].PostId, @posts[0].Score)" class="downvote">
                                    <div id="@posts[0].PostId-downlayer"></div>
                                </span>
                            }
                        }
                    </div>
                    <div class="content">
                        <a class=\"post-title\" href=//@posts[0].Link>@posts[0].Title</a><br>
                        <div class="sub">
                            <a class="creator" href=/user/@posts[0].Creator.UserName>@posts[0].Creator.UserName</a> | 
                            @posts[0].Created.ToString("dd / MM / yyyy") | 
                            <a href='/post/@posts[0].PostId'>@posts[0].Comments.Count() comments</a>
                            in <a class="creator" href='/r/@posts[0].Subreddit'>r/@posts[0].SubredditName</a>
                        </div>
                    </div>
                </div>
            </li>
            posts.RemoveAt(0);
        }

    <li style="display: block"><div class="comment" id="comment-@item.CommentId">


@{var timePassed = TimePassedAsString(@item.Created);}
<div class="upvote-btn">
        <span id="comment-@item.CommentId-upbtn" onclick="upvote_comment(@item.CommentId, @item.Score)" class="upvote">
                <div id="comment-@item.CommentId-uplayer"></div>
            </span>
    
            <span id="comment-@item.CommentId-downbtn" onclick="downvote_comment(@item.CommentId, @item.Score)" class="downvote">
                <div id="comment-@item.CommentId-downlayer"></div>
            </span>
</div>

<div class="content" style="margin-top:5px;margin-left:5px;margin-bottom:5px;">
            <div>
                <a href="#" class="expander" style="font-size:small" onclick="toggle_comment(@item.CommentId); return false;">[-]</a>
                <a href="/user/@item.Creator.UserName" class='author'>@item.Creator.UserName</a>
                <span class="score" id="comment-@item.CommentId-score">@item.Score Points</span>
                <span class="date">@timePassed</span><br>
                <div  class="text" style="margin: 5px 0;">@item.Txt</div>
            </div>
    </div>
</div>
    </li>
    }

    @foreach (var item in posts)
    {
         <li style="display: block">
                <div class="post">
                    <div class="upvote-btn">
                        @{
                            if (item.UpvotedBy.FirstOrDefault(x => x.UserId == userManager.GetUserId(User)) != null && item.UpvotedBy.FirstOrDefault(x => x.UserId == userManager.GetUserId(User)).Upvoted)
                            {
                                <span id="@item.PostId-upbtn" onclick="un_upvote_post(@item.PostId, @item.Score - 1)" class="upvote">
                                    <div id="@item.PostId-uplayer"
                                        style="background-color: rgba(255, 165, 0, 0.7);width:85%;height:10px;margin-top:5px"></div>
                                </span>
                                <div id="@item.PostId-score" style="color:orange">@item.Score</div>
                        
                                <span id="@item.PostId-downbtn" onclick="downvote_post(@item.PostId, @item.Score - 1)" class="downvote">
                                    <div id="@item.PostId-downlayer"></div>
                                </span>
                            }
                            else if (item.DownvotedBy.FirstOrDefault(x => x.UserId == userManager.GetUserId(User)) != null && item.DownvotedBy.FirstOrDefault(x => x.UserId == userManager.GetUserId(User)).Downvoted)
                            {
                                <span id="@item.PostId-upbtn" onclick="upvote_post(@item.PostId, @item.Score + 1)" class="upvote">
                                    <div id="@item.PostId-uplayer"></div>
                                </span>
                                <div id="@item.PostId-score" style="color:blue">@item.Score</div>
                        
                                <span id="@item.PostId-downbtn" onclick="un_downvote_post(@item.PostId, @item.Score + 1)" class="downvote">
                                    <div id="@item.PostId-downlayer"
                                    style="background-color: rgba(0, 0, 255, 0.7);width:85%;height:10px;margin-top:5px"></div>
                                </span>
                            }
                            else
                            {
                                <span id="@item.PostId-upbtn" onclick="upvote_post(@item.PostId, @item.Score)" class="upvote">
                                    <div id="@item.PostId-uplayer"></div>
                                </span>
                                <div id="@item.PostId-score">@item.Score</div>
                        
                                <span id="@item.PostId-downbtn" onclick="downvote_post(@item.PostId, @item.Score)" class="downvote">
                                    <div id="@item.PostId-downlayer"></div>
                                </span>
                            }
                        }
                    </div>
                    <div class="content">
                        <a class=\"post-title\" href=//@item.Link>@item.Title</a><br>
                        <div class="sub">
                            submitted @TimePassedAsString(item.Created) by
                            <a class="creator" href=/user/@item.Creator.UserName>@item.Creator.UserName</a>
                            in <a class="creator" href='/r/@item.Subreddit'>r/@item.SubredditName</a>
                        </div>
                        <div class="sub-2">
                            <a href='/post/@item.PostId'>@item.Comments.Count() comments</a>
                        </div>
                    </div>
                </div>
            </li>
    }
</ul>



@functions {
    string TimePassedAsString(DateTime time)
    {
        var difference = DateTime.Now.Subtract(time);

        if (difference.Days >= 30)
        {
            var countMonths = difference.Days / 30;
            return difference.Days / 30 + " months ago";
        }
        else if (difference.Days > 0)
            return difference.Days + " days ago";
        else if (difference.Hours > 0)
            return difference.Hours + " hours ago";
        else if (difference.Minutes > 0)
            return difference.Minutes + " minutes ago";

        return "<1min ago";
    }
}
</div>