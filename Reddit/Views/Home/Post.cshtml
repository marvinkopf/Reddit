@using Microsoft.AspNetCore.Mvc.ViewFeatures
@{ ViewData["Title"] = Model.Title;
    ViewData["Subtitle"] = Model.SubredditName; }
@inject UserManager<ApplicationUser> userManager
@model Post

<div class="links">
<div class="post">
    <div class="upvote-btn">
        @{
                    if (Model.UpvotedBy.FirstOrDefault(x => x.UserId == userManager.GetUserId(User)) != null && Model.UpvotedBy.FirstOrDefault(x => x.UserId == userManager.GetUserId(User)).Upvoted) {
                        <span style="color:orange;" id="@Model.PostId-upbtn" onclick="un_upvote_post(@Model.PostId, @Model.Score - 1)" class="upvote">
                        </span>
                        <div style="color:orange;" class="vote-score" id="@Model.PostId-score" style="color:orange">@Model.Score</div>

                        <span id="@Model.PostId-downbtn" onclick="downvote_post(@Model.PostId, @Model.Score - 1)" class="downvote">
                        </span>
                    }
                    else if (Model.DownvotedBy.FirstOrDefault(x => x.UserId == userManager.GetUserId(User)) != null && Model.DownvotedBy.FirstOrDefault(x => x.UserId == userManager.GetUserId(User)).Downvoted) {
                        <span id="@Model.PostId-upbtn" onclick="upvote_post(@Model.PostId, @Model.Score + 1)" class="upvote">
                        </span>
                        <div style="color:blue;" class="vote-score" id="@Model.PostId-score" style="color:blue">@Model.Score</div>

                        <span style="color:blue;" id="@Model.PostId-downbtn" onclick="un_downvote_post(@Model.PostId, @Model.Score + 1)" class="downvote">
                        </span>
                    }
                    else {
                        @if (userManager.GetUserId(User) == null)
                        {
                            <a href="/Account/Login">
                                <span id="@Model.PostId-upbtn" class="upvote">
                                </span>
                            </a>
                            <div class="vote-score" id="@Model.PostId-score">@Model.Score</div>

                            <a href="/Account/Login">
                                <span id="@Model.PostId-downbtn" class="downvote">
                                </span>
                            </a>
                        }
                        else
                        {
                            <span id="@Model.PostId-upbtn" onclick="upvote_post(@Model.PostId, @Model.Score)" class="upvote">
                            </span>
                            <div class="vote-score" id="@Model.PostId-score">@Model.Score</div>

                            <span id="@Model.PostId-downbtn" onclick="downvote_post(@Model.PostId, @Model.Score)" class="downvote">
                            </span>
                        }
                    }
                }
    </div>
    <div class="content">
        <a class=\"post-title\" href=//@Model.Link>@Model.Title</a><br>
        <div class="sub">
            created @TimePassedAsString(Model.Created) by
            <a class="creator" href=/user/@Model.Creator.UserName>@Model.Creator.UserName</a>
        </div>
        <div class="sub-2">
            <a href='/post/@Model.PostId'>@Model.Comments.Count() comments</a>
        </div>
    </div>
</div>

@if (userManager.GetUserId(User) != null)
{
    <form style="margin-left:10px" action="#" onsubmit="post_form(this, '/api/comment')">
    <textarea class="comment-input" id="Txt" name="Txt" value=""></textarea>
    <input type="hidden" id="postId" name="postId" value="@Model.PostId" /><br>
    <input type="submit" class="button">
    </form>
}

    <ul style="margin-left:10px;">
        @foreach (var item in Model.Comments.Where(c => c.Parent == null).OrderByDescending(c => c.Score)) {
        <li style="display: block">
            @Html.Partial("_CommentPartial", Tuple.Create<Comment, bool>(item, false))
        </li>
        }
    </ul>
</div>

<div class="sidebar">
    <ul class="sidebar-links">
        <li>
            <a asp-controller="Home" asp-action="Submit" class="">Submit Link</a>
        </li>
        @if (Model.Subreddit.SubscribedUsers.Any(x => x.UserId == userManager.GetUserId(User)
            && x.Subscribed))
        {
            <li>
                <a id="subscribe" href="javascript:void" onclick="subreddit_unsubscribe('@Model.SubredditName')" class="">
                    Unsubscribe
                </a>
            </li>
        }
        else
        {
            <li>
                <a id="subscribe" href="javascript:void" onclick="subreddit_subscribe('@Model.SubredditName')" class="">
                    Subscribe
                </a>
            </li>
        }
    </ul>

    @{
        var count = Model.Subreddit.SubscribedUsers.Where(x => x.Subscribed).Count();
    }

    <div style="text-align:center">@count subscribers</div>
</div>

@functions {
    string TimePassedAsString(DateTime time)
    {
        var difference = DateTime.Now.Subtract(time);

        if (difference.Days >= 30)
        {
            var countMonths = difference.Days / 30;
            return difference.Days / 30 + " months ago";
        }
        else if (difference.Days > 0)
            return difference.Days + " days ago";
        else if (difference.Hours > 0)
            return difference.Hours + " hours ago";
        else if (difference.Minutes > 0)
            return difference.Minutes + " minutes ago";

        return "<1min ago";
    }
}

